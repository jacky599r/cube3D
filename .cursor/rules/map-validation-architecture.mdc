---
description: "Architecture and flow guidelines for the cub3D map validation system"
globs: utils/*.c,main.c,*.h
---

# Map Validation Architecture Guidelines

## File Organization by Responsibility

### `utils/ft_file_reader.c` (5 functions max)
**Purpose**: File I/O operations for reading .cub files
- `ft_open_map_file()` - Opens and validates file accessibility
- `ft_add_line_to_array()` - Dynamic array growth for file lines
- `ft_read_lines_into_array()` - Reads all lines from file descriptor
- `ft_check_for_empty_file()` - Validates file is not empty
- `ft_get_raw_map_data()` - Main orchestrator for file reading

### `utils/ft_param_parser.c` (5 functions max)  
**Purpose**: Parse and validate texture/color parameters (NO, SO, WE, EA, F, C)
- `ft_is_valid_param_identifier()` - Identifies parameter lines
- `ft_check_duplicate_param()` - Prevents duplicate parameters
- `ft_parse_texture_path()` - Validates texture file paths
- `ft_validate_rgb_and_convert()` - Validates RGB color format
- `ft_parse_color_values()` - Processes color parameter lines

### `utils/ft_map_validator.c` (5 functions max)
**Purpose**: Structural validation of map content and layout
- `ft_is_map_line()` - Identifies map content lines
- `ft_validate_map_characters()` - Validates individual map characters
- `ft_process_player_info()` - Handles player position/direction
- `ft_identify_map_properties()` - Determines map dimensions and player
- `ft_check_map_config()` - Main orchestrator for map validation

### `utils/ft_map_processor.c` (2 functions)
**Purpose**: Prepare map data for flood-fill algorithm
- `ft_prepare_map_for_flood_fill()` - Creates flood-fill compatible map
- `ft_set_initial_player_view()` - Sets player direction/camera vectors

### `utils/ft_map_enclosure.c` (4 functions)
**Purpose**: Flood-fill algorithm for map enclosure validation
- `ft_create_temp_flood_map()` - Creates temporary map copy
- `ft_perform_flood_fill()` - Recursive flood-fill algorithm
- `ft_check_enclosed_borders()` - Validates map borders after flood-fill
- `ft_validate_map_enclosure()` - Main enclosure validation orchestrator

### `utils/ft_utils.c` (4 functions)
**Purpose**: General utility functions used across modules
- `ft_is_num()` - Validates numeric strings
- `ft_is_empty_line()` - Checks for empty/whitespace-only lines
- `ft_error_msg()` - Standardized error message output
- `ft_safe_array()` - Safe memory deallocation for arrays

## Validation Flow Sequence

1. **File Reading**: `ft_get_raw_map_data()` → `data->map.og_map`
2. **Structure Validation**: `ft_check_map_config()` → validates parameters + map layout
3. **Map Processing**: `ft_prepare_map_for_flood_fill()` → creates `data->fl_map`
4. **Player Setup**: `ft_set_initial_player_view()` → sets direction vectors
5. **Enclosure Check**: `ft_validate_map_enclosure()` → flood-fill validation

## Parameter Limit Strategies

### When approaching 4 parameter limit:
- Use `t_data *data` to pass multiple related values
- Create helper structs like `t_map_dims` for coordinate pairs
- Break complex functions into smaller, focused operations

### When approaching 5 variable limit:
- Reuse variables when their scope doesn't overlap
- Extract complex operations into separate functions
- Use function return values instead of additional local variables

## Error Handling Patterns
- All functions return `PASS` (0) or `FAIL` (-1/specific error code)
- Use `ft_error_msg()` for consistent error reporting
- Clean up allocated memory before returning on errors
- Propagate errors up the call stack appropriately